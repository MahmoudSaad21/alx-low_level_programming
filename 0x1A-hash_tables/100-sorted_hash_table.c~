#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "hash_tables.h"

/**
 * shash_table_create - Creates a sorted hash table.
 * @size: The size of the array.
 *
 * Return: A pointer to the newly created sorted hash table.
 */
shash_table_t *shash_table_create(unsigned long int size)
{
    shash_table_t *ht = malloc(sizeof(shash_table_t));
    if (ht == NULL)
        return (NULL);

    ht->size = size;
    ht->array = calloc(size, sizeof(shash_node_t *));
    if (ht->array == NULL)
    {
        free(ht);
        return (NULL);
    }

    ht->shead = NULL;
    ht->stail = NULL;

    return (ht);
}

/**
 * shash_table_set - Adds an element to the sorted hash table.
 * @ht: The sorted hash table to add or update the key/value to.
 * @key: The key. Cannot be an empty string.
 * @value: The value associated with the key. Must be duplicated.
 *
 * Return: 1 if it succeeded, 0 otherwise.
 */
int shash_table_set(shash_table_t *ht, const char *key, const char *value)
{
    shash_node_t *new_node, *current_node, *prev_node;
    unsigned long int index;

    if (ht == NULL || key == NULL || *key == '\0' || value == NULL)
        return (0);

    index = key_index((const unsigned char *)key, ht->size);
    current_node = ht->shead;
    prev_node = NULL;

    while (current_node != NULL && strcmp(current_node->key, key) < 0)
    {
        prev_node = current_node;
        current_node = current_node->snext;
    }

    if (current_node != NULL && strcmp(current_node->key, key) == 0)
    {
        free(current_node->value);
        current_node->value = strdup(value);
        if (current_node->value == NULL)
            return (0);
        return (1);
    }

    new_node = malloc(sizeof(shash_node_t));
    if (new_node == NULL)
        return (0);

    new_node->key = strdup(key);
    if (new_node->key == NULL)
    {
        free(new_node);
        return (0);
    }

    new_node->value = strdup(value);
    if (new_node->value == NULL)
    {
        free(new_node->key);
        free(new_node);
        return (0);
    }

    new_node->next = ht->array[index];
    ht->array[index] = new_node;

    if (prev_node == NULL)
    {
        new_node->snext = ht->shead;
        ht->shead = new_node;
    }
    else
    {
        new_node->snext = prev_node->snext;
        prev_node->snext = new_node;
    }

    if (new_node->snext == NULL)
        ht->stail = new_node;

    return (1);
}

/**
 * shash_table_get - Retrieves the value associated with a key in the sorted hash table.
 * @ht: The sorted hash table.
 * @key: The key to search for.
 *
 * Return: The value associated with the key, or NULL if key is not found.
 */
char *shash_table_get(const shash_table_t *ht, const char *key)
{
    shash_node_t *current_node;

    if (ht == NULL || key == NULL || *key == '\0')
        return (NULL);

    current_node = ht->shead;

    while (current_node != NULL)
    {
        if (strcmp(current_node->key, key) == 0)
            return (current_node->value);
        current_node = current_node->snext;
    }

    return (NULL);
}

/**
 * shash_table_print - Prints the sorted hash table using the sorted linked list.
 * @ht: The sorted hash table.
 */
void shash_table_print(const shash_table_t *ht)
{
    shash_node_t *current_node;

    if (ht == NULL)
        return;

    printf("{");
    current_node = ht->shead;

    while (current_node != NULL)
    {
        printf("'%s': '%s'", current_node->key, current_node->value);
        current_node = current_node->snext;
        if (current_node != NULL)
            printf(", ");
    }

    printf("}\n");
}

/**
 * shash_table_print_rev - Prints the hash tables key/value pairs in reverse order
 *                         using the sorted linked list.
 * @ht: The sorted hash table.
 */
void shash_table_print_rev(const shash_table_t *ht)
{
    shash_node_t *current_node;

    if (ht == NULL)
        return;

    printf("{");
    current_node = ht->stail;

    while (current_node != NULL)
    {
        printf("'%s': '%s'", current_node->key, current_node->value);
        current_node = current_node->sprev;
        if (current_node != NULL)
            printf(", ");
    }

    printf("}\n");
}

/**
 * shash_table_delete - Deletes a sorted hash table.
 * @ht: The sorted hash table to delete.
 */
void shash_table_delete(shash_table_t *ht)
{
    shash_node_t *current_node, *next_node;

    if (ht == NULL)
        return;

    current_node = ht->shead;

    while (current_node != NULL)
    {
        next_node = current_node->snext;
        free(current_node->key);
        free(current_node->value);
        free(current_node);
        current_node = next_node;
    }

    free(ht->array);
    free(ht);
}
